// Code generated by counterfeiter. DO NOT EDIT.
package githubfakes

import (
	"heimdall/internal/service/github"
	"sync"
	"time"
)

type FakeIRepositoryService struct {
	GetRepositoryStub        func(string, string) (github.Repository, error)
	getRepositoryMutex       sync.RWMutex
	getRepositoryArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getRepositoryReturns struct {
		result1 github.Repository
		result2 error
	}
	getRepositoryReturnsOnCall map[int]struct {
		result1 github.Repository
		result2 error
	}
	ListCommitStub        func(string, string, time.Time, string) ([]github.Commit, string, error)
	listCommitMutex       sync.RWMutex
	listCommitArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 time.Time
		arg4 string
	}
	listCommitReturns struct {
		result1 []github.Commit
		result2 string
		result3 error
	}
	listCommitReturnsOnCall map[int]struct {
		result1 []github.Commit
		result2 string
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIRepositoryService) GetRepository(arg1 string, arg2 string) (github.Repository, error) {
	fake.getRepositoryMutex.Lock()
	ret, specificReturn := fake.getRepositoryReturnsOnCall[len(fake.getRepositoryArgsForCall)]
	fake.getRepositoryArgsForCall = append(fake.getRepositoryArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.GetRepositoryStub
	fakeReturns := fake.getRepositoryReturns
	fake.recordInvocation("GetRepository", []interface{}{arg1, arg2})
	fake.getRepositoryMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIRepositoryService) GetRepositoryCallCount() int {
	fake.getRepositoryMutex.RLock()
	defer fake.getRepositoryMutex.RUnlock()
	return len(fake.getRepositoryArgsForCall)
}

func (fake *FakeIRepositoryService) GetRepositoryCalls(stub func(string, string) (github.Repository, error)) {
	fake.getRepositoryMutex.Lock()
	defer fake.getRepositoryMutex.Unlock()
	fake.GetRepositoryStub = stub
}

func (fake *FakeIRepositoryService) GetRepositoryArgsForCall(i int) (string, string) {
	fake.getRepositoryMutex.RLock()
	defer fake.getRepositoryMutex.RUnlock()
	argsForCall := fake.getRepositoryArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIRepositoryService) GetRepositoryReturns(result1 github.Repository, result2 error) {
	fake.getRepositoryMutex.Lock()
	defer fake.getRepositoryMutex.Unlock()
	fake.GetRepositoryStub = nil
	fake.getRepositoryReturns = struct {
		result1 github.Repository
		result2 error
	}{result1, result2}
}

func (fake *FakeIRepositoryService) GetRepositoryReturnsOnCall(i int, result1 github.Repository, result2 error) {
	fake.getRepositoryMutex.Lock()
	defer fake.getRepositoryMutex.Unlock()
	fake.GetRepositoryStub = nil
	if fake.getRepositoryReturnsOnCall == nil {
		fake.getRepositoryReturnsOnCall = make(map[int]struct {
			result1 github.Repository
			result2 error
		})
	}
	fake.getRepositoryReturnsOnCall[i] = struct {
		result1 github.Repository
		result2 error
	}{result1, result2}
}

func (fake *FakeIRepositoryService) ListCommit(arg1 string, arg2 string, arg3 time.Time, arg4 string) ([]github.Commit, string, error) {
	fake.listCommitMutex.Lock()
	ret, specificReturn := fake.listCommitReturnsOnCall[len(fake.listCommitArgsForCall)]
	fake.listCommitArgsForCall = append(fake.listCommitArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 time.Time
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.ListCommitStub
	fakeReturns := fake.listCommitReturns
	fake.recordInvocation("ListCommit", []interface{}{arg1, arg2, arg3, arg4})
	fake.listCommitMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeIRepositoryService) ListCommitCallCount() int {
	fake.listCommitMutex.RLock()
	defer fake.listCommitMutex.RUnlock()
	return len(fake.listCommitArgsForCall)
}

func (fake *FakeIRepositoryService) ListCommitCalls(stub func(string, string, time.Time, string) ([]github.Commit, string, error)) {
	fake.listCommitMutex.Lock()
	defer fake.listCommitMutex.Unlock()
	fake.ListCommitStub = stub
}

func (fake *FakeIRepositoryService) ListCommitArgsForCall(i int) (string, string, time.Time, string) {
	fake.listCommitMutex.RLock()
	defer fake.listCommitMutex.RUnlock()
	argsForCall := fake.listCommitArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeIRepositoryService) ListCommitReturns(result1 []github.Commit, result2 string, result3 error) {
	fake.listCommitMutex.Lock()
	defer fake.listCommitMutex.Unlock()
	fake.ListCommitStub = nil
	fake.listCommitReturns = struct {
		result1 []github.Commit
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeIRepositoryService) ListCommitReturnsOnCall(i int, result1 []github.Commit, result2 string, result3 error) {
	fake.listCommitMutex.Lock()
	defer fake.listCommitMutex.Unlock()
	fake.ListCommitStub = nil
	if fake.listCommitReturnsOnCall == nil {
		fake.listCommitReturnsOnCall = make(map[int]struct {
			result1 []github.Commit
			result2 string
			result3 error
		})
	}
	fake.listCommitReturnsOnCall[i] = struct {
		result1 []github.Commit
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeIRepositoryService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getRepositoryMutex.RLock()
	defer fake.getRepositoryMutex.RUnlock()
	fake.listCommitMutex.RLock()
	defer fake.listCommitMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeIRepositoryService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ github.IRepositoryService = new(FakeIRepositoryService)
